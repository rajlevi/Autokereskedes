//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 05. 01. 13:19:28
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace Autoker
{

    public partial class cnAutoker : DbContext
    {

        public cnAutoker() :
            base()
        {
            OnCreated();
        }

        public cnAutoker(DbContextOptions<cnAutoker> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Kereskedes> Kereskedes
        {
            get;
            set;
        }

        public virtual DbSet<Cim> Cims
        {
            get;
            set;
        }

        public virtual DbSet<Auto> Autok
        {
            get;
            set;
        }

        public virtual DbSet<Elado> Eladok
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.KereskedesMapping(modelBuilder);
            this.CustomizeKereskedesMapping(modelBuilder);

            this.CimMapping(modelBuilder);
            this.CustomizeCimMapping(modelBuilder);

            this.AutoMapping(modelBuilder);
            this.CustomizeAutoMapping(modelBuilder);

            this.EladoMapping(modelBuilder);
            this.CustomizeEladoMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Kereskedes Mapping

        private void KereskedesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Kereskedes>().ToTable(@"Kereskedesek");
            modelBuilder.Entity<Kereskedes>().Property(x => x.KereskedesId).HasColumnName(@"KereskedesId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Kereskedes>().Property<short>(@"CimId").HasColumnName(@"CimId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kereskedes>().Property<short>(@"EladoId").HasColumnName(@"EladoId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kereskedes>().Property<short>(@"AutoId").HasColumnName(@"AutoId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kereskedes>().Property(x => x.Nev).HasColumnName(@"Nev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kereskedes>().Property(x => x.Jegyzekszam).HasColumnName(@"Jegyzekszam").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Kereskedes>().HasKey(@"KereskedesId");
        }

        partial void CustomizeKereskedesMapping(ModelBuilder modelBuilder);

        #endregion

        #region Cim Mapping

        private void CimMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Cim>().ToTable(@"Cimek");
            modelBuilder.Entity<Cim>().Property(x => x.CimId).HasColumnName(@"CimId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Cim>().Property(x => x.Varos).HasColumnName(@"Varos").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Cim>().Property(x => x.Utca).HasColumnName(@"Utca").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Cim>().Property(x => x.Hazszam).HasColumnName(@"Hazszam").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Cim>().HasKey(@"CimId");
        }

        partial void CustomizeCimMapping(ModelBuilder modelBuilder);

        #endregion

        #region Auto Mapping

        private void AutoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Auto>().ToTable(@"Autok");
            modelBuilder.Entity<Auto>().Property(x => x.AutoId).HasColumnName(@"AutoId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Auto>().Property(x => x.Marka).HasColumnName(@"Marka").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Auto>().Property(x => x.Kivitel).HasColumnName(@"Kivitel").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Auto>().Property(x => x.Evjarat).HasColumnName(@"Evjarat").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Auto>().Property(x => x.Uzemanyag).HasColumnName(@"Uzemanyag").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Auto>().Property(x => x.Szin).HasColumnName(@"Szin").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Auto>().HasKey(@"AutoId");
        }

        partial void CustomizeAutoMapping(ModelBuilder modelBuilder);

        #endregion

        #region Elado Mapping

        private void EladoMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Elado>().ToTable(@"Eladok");
            modelBuilder.Entity<Elado>().Property(x => x.EladoId).HasColumnName(@"EladoId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Elado>().Property(x => x.Nev).HasColumnName(@"Nev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Elado>().Property(x => x.Telszam).HasColumnName(@"Telszam").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Elado>().Property(x => x.Szuldatum).HasColumnName(@"Szuldatum").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Elado>().Property(x => x.email).HasColumnName(@"email").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Elado>().Property(x => x.jelszo).HasColumnName(@"jelszo").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Elado>().HasKey(@"EladoId");
        }

        partial void CustomizeEladoMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Kereskedes>().HasMany(x => x.Autos).WithOne(op => op.Kereskedes1).HasPrincipalKey(@"AutoId").HasForeignKey(@"AutoId").IsRequired(true);
            modelBuilder.Entity<Kereskedes>().HasMany(x => x.Elados).WithOne(op => op.Kereskedes1).HasPrincipalKey(@"EladoId").HasForeignKey(@"EladoId").IsRequired(true);

            modelBuilder.Entity<Cim>().HasOne(x => x.Kereskedes).WithOne(op => op.Cim).HasForeignKey(typeof(Kereskedes), @"CimId").IsRequired(false);

            modelBuilder.Entity<Auto>().HasOne(x => x.Kereskedes1).WithMany(op => op.Autos).HasPrincipalKey(@"AutoId").HasForeignKey(@"AutoId").IsRequired(true);

            modelBuilder.Entity<Elado>().HasOne(x => x.Kereskedes1).WithMany(op => op.Elados).HasPrincipalKey(@"EladoId").HasForeignKey(@"EladoId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
